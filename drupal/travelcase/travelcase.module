<?php

function travelcase_menu() {
  $items = array();

  $items['bcd/remove-travel-request/%/%'] = array( //this creates a URL that will call this form at "examples/form-example"
    'title' => 'Remove travelrequest', //page title
    'description' => 'Remove travelrequest',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('travelcase_bcd_remove_travel_request', 2, 3), //put the name of the form here
    'access callback' => 'travelcase_user_has_role',
    'access arguments' => array(array('BCD')), // arg 1 loads the user, arg 2 is the role name
  );

  return $items;
}

function travelcase_bcd_remove_travel_request($form, &$form_state, $contact_id, $case_id) {
  $form['contact_id']['#type'] = 'hidden';
  $form['contact_id']['#name'] = 'contact_id';
  $form['contact_id']['#value'] = $contact_id;

  $form['case_id']['#type'] = 'hidden';
  $form['case_id']['#name'] = 'case_id';
  $form['case_id']['#value'] = $case_id;

  $form['condition_subject']['#type'] = 'markup';
  $form['condition_subject']['#markup'] = '<p>Are you sure to remove this travel request?</p>';

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Remove travel request'),
  );

  return $form;
}

function travelcase_bcd_remove_travel_request_submit($form, &$form_state) {
  civicrm_initialize();
  $case_id = $form_state['values']['case_id'];
  $ta_info = civicrm_api3('CustomGroup', 'getsingle', array('name' => 'info_for_travel_agency'));
  $request_for_booking = civicrm_api3('CustomField', 'getsingle', array('name' => 'request_for_booking', 'custom_group_id' => $ta_info['id']));

  $sql = "UPDATE `".$ta_info['table_name']."` SET `".$request_for_booking['column_name']."` = '0' WHERE `entity_id` = %1";
  $params[1] = array($case_id, 'Integer');
  CRM_Core_DAO::executeQuery($sql, $params);

  $form_state['redirect'] = 'bcd/travel-requests';
}

function travelcase_user_has_role($roles = array())
{
  global $user;
  foreach ($roles as $role) {
    if (in_array($role, $user->roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

function travelcase_views_api() {
  return array('api' => 3.0);
}

function travelcase_views_default_views() {
  civicrm_initialize();
  $files = file_scan_directory(drupal_get_path('module', 'travelcase'). '/views', '/.inc/');
  $views = array();
  foreach ($files as $filepath => $file) {
    require $filepath;
    if (isset($view)) {
      $views[$view->name] = $view;
    }
  }
  return $views;
}

function _travelcase_get_fa_sponsor_display_name($case_id) {
  $contact_id = _travelcase_get_fa_sponsor_contact_id($case_id);
  if (!$contact_id) {
    return false;
  }
  
  $contact_params['id'] = $contact_id;
  $contact_params['return'] = 'display_name';
  return civicrm_api3('Contact', 'getvalue', $contact_params);
}

function _travelcase_get_fa_sponsor_code($case_id) {
  $contact_id = _travelcase_get_fa_sponsor_contact_id($case_id);
  if (!$contact_id) {
    return false;
  }
  
  $sponsor_code_group = civicrm_api3('CustomGroup', 'getsingle', array('name' => 'Donor_details_FA'));
  $sponsor_code_field = civicrm_api3('CustomField', 'getvalue', array('name' => 'Donor_code', 'return' => 'id', 'custom_group_id' => $sponsor_code_group['id']));
  
  $contact_params['id'] = $contact_id;
  $contact_params['return'] = 'custom_'.$sponsor_code_field;
  return civicrm_api3('Contact', 'getvalue', $contact_params);
}

function _travelcase_get_fa_sponsor_contact_id($case_id) {
  static $contact_ids = array();
  
  if (!isset($contact_ids[$case_id])) {
    $fa_donor_params = array(
      'entity_id' => $case_id,
      'entity' => 'Case',
      'is_fa_donor' => 1
    );
    $fa_donation = CRM_Threepeas_BAO_PumDonorLink::getValues($fa_donor_params);
    $fa_donation = reset($fa_donation);
    $donor_contact_id = false;
    if ($fa_donation['donation_entity'] == 'Contribution') {
      $donor_contact_id = civicrm_api3('Contribution', 'getvalue', array(
        'return' => 'contact_id',
        'id' => $fa_donation['donation_entity_id'],
      ));
    }
    $contact_ids[$case_id] = $donor_contact_id;
  }
  
  return $contact_ids[$case_id];
}

function travelcase_get_role_ids($roles) {
  $rids = array();
  $available_roles = user_roles();
  foreach($roles as $role) {
    $rid = array_search($role, $available_roles);
    if ($rid !== false) {
      $rids[$rid] = $rid;
    }
  }
  
  return $rids;
}